#!/usr/bin/env node

var CssMap = require("../cssmap");
var Formatter = require("../formatter");

var fs = require('fs');
var argv = require('optimist')
  .usage('Creates css map for google closure.\nUsage: $0 -i [cssFile] -o [outputCssFile] -m [outputJsFile]')
  .demand('file')
  .alias('file', 'f')
  .describe('file', 'input.css:output.css')
  .demand('output-renaming-map')
  .alias('output-renaming-map', 'm')
  .describe('output-renaming-map', 'Path to file with map')
  .default('output-renaming-map-format', 'CLOSURE_COMPILED')
  .alias('output-renaming-map-format', 'r')
  .describe('output-renaming-map-format', 'Map format: CLOSURE_COMPILED, CLOSURE_UNCOMPILED, JSON or ejs file')
  .default('alphabet', CssMap.getDefaultMapSymbols())
  .alias('alphabet', 'a')
  .describe('alphabet', 'Alphabet for replacements')
  .alias('excludes', 'e')
  .describe('excludes', 'Css classes which dont need to compress')
  .alias('bywhole', 'w')
  .describe('bywhole', 'Obfuscation style for CSS class names')
  .argv;

try{
  var excludes = {};
  if (argv.excludes) {
    argv.excludes.split(',').forEach(function(cssClass) {
      excludes[cssClass.replace(/^\s*|\s*$/g, '')] = true;
    });
  }
  excludes = Object.keys(excludes);

  var tempFiles = argv.f instanceof Array ? argv.f : [argv.f];
  var files = [];
  tempFiles.forEach(function(file) {
    var arr = file.split(':');
    if (arr.length != 2) {
      throw Error('Bad file: ' + file);
    }

    files.push({
      input: arr[0],
      output: arr[1],
      data: new String(fs.readFileSync(arr[0]))
    });
  });

  var cssMap = new CssMap();
  cssMap.enableByWholeStyle(!!argv.bywhole);
  cssMap.setExcludes(excludes);
  files.forEach(function(file) {
    cssMap.addFile(file.data);
  })
  if (argv.alphabet) {
    cssMap.setMapSymbols(argv.alphabet);
  }
  cssMap.compile();

  var cssMapFiles = cssMap.getFiles();
  cssMapFiles.forEach(function(file, pos) {
    var fileData = files[pos];

    fs.writeFile(fileData.output, file.result, function (err) {
      if (err) throw err;
      process.stdout.write('Saved: ' + fileData.output + '\n');
    });
  });

  fs.writeFile(argv.m, Formatter.format(cssMap.getMap(), argv.r), function (err) {
    if (err) throw err;
    process.stdout.write('Saved: ' + argv.m + '\n');
  });

  process.stdout.write('Success' + '\n');
} catch(e) {
  // throw e;
  process.stderr.write('Exception: ' + e.message + '\n');
}
