#!/usr/bin/env node

var CssMap = require("../cssmap");
var Formatter = require("../formatter");

var fs = require('fs');
var argv = require('optimist')
  .usage('Creates css map for google closure.\nUsage: $0 -i [cssFile] -o [outputCssFile] -m [outputJsFile]')
  .demand('input')
  .alias('input', 'i')
  .describe('input', 'Path to file with css rules')
  .demand('output-file')
  .alias('output-file', 'o')
  .describe('output-file', 'Path to file with compiled css rules')
  .demand('output-renaming-map')
  .alias('output-renaming-map', 'm')
  .describe('output-renaming-map', 'Path to file with map')
  .default('output-renaming-map-format', 'CLOSURE_COMPILED')
  .alias('output-renaming-map-format', 'f')
  .describe('output-renaming-map-format', 'Map format: CLOSURE_COMPILED, CLOSURE_UNCOMPILED, JSON or ejs file')
  .default('alphabet', CssMap.getDefaultMapSymbols())
  .alias('alphabet', 'a')
  .describe('alphabet', 'Alphabet for replacements')
  .alias('excludes', 'e')
  .describe('excludes', 'Css classes which dont need to compress')
  .argv;

try{
  var excludes = [];
  if (argv.excludes) {
    excludes = argv.excludes.split(',');
    excludes.forEach(function(str, pos) {
      excludes[pos] = str.replace(/^\s*|\s*$/g, '');
    });
  }

  var data = new String(fs.readFileSync(argv.i))
  var cssMap = new CssMap(data, excludes);

  if (argv.alphabet) {
    cssMap.setMapSymbols(argv.alphabet);
  }

  cssMap.compile();

  fs.writeFile(argv.o, cssMap.getResult(), function (err) {
    if (err) throw err;
    process.stdout.write('Saved: ' + argv.o + '\n');
  });

  fs.writeFile(argv.m, Formatter.format(cssMap.getMap(), argv.f), function (err) {
    if (err) throw err;
    process.stdout.write('Saved: ' + argv.m + '\n');
  });

  process.stdout.write('Success' + '\n');
} catch(e) {
  process.stderr.write('Exception: ' + e.message + '\n');
}
